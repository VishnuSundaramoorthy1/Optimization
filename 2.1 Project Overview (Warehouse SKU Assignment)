This repository contains a supply chain optimization model implemented in Julia and data manipulation techniques in Python. 
The project focuses on warehouse selection, inventory management, and logistics planning to optimize supply chain operations efficiently.

ðŸ“Œ Project Overview
The project is divided into two major components:

ðŸ”¹ Warehouse Optimization using Julia
Objective: Assign parts to warehouses optimally to minimize lead time and reorder points (ROP) while maximizing part concentration.
Methodology:
Integer Programming (IP) model implemented using JuMP and HiGHS/GLPK solvers.
Binary decision variables where each part is assigned to exactly one warehouse.
Constraints:
If customer concentration â‰¥ 55%, the part must be assigned to that warehouse.
Ensures that each part is only assigned to a single warehouse.
Key Outputs:
Optimal warehouse assignments for each part.
CSV output of results (Result_From_Julia_55.csv).
ðŸ”¹ Data Manipulation & Logistics Analysis in Python
Objective: Prepares, cleans, and processes sales, logistics, and inventory data for further modeling.
Key Steps:
Reading & filtering sales data (Sales_History_Apodaca.csv).
Merging & analyzing logistic data (US CAN ZIP CODE FILE 1.xlsx).
Warehouse location analysis using geopy for distance calculations.
Statistical modeling using scipy.stats.norm for demand analysis.
Key Outputs:
Cleaned and processed sales, logistics, and inventory data.
Visualizations for warehouse selection & lead time.
ðŸ“ˆ Results & Insights
âœ… Optimized Warehouse Selection for demand fulfillment.
âœ… Minimized Lead Time & Inventory Holding Costs.
âœ… Automated Data Processing for sales & logistics analysis.
âœ… Scalable Supply Chain Decision-Making Model.
ðŸš€ Future Enhancements
ðŸ”¹ Dynamic Demand Forecasting using machine learning.
ðŸ”¹ Integrating Uncertainty Modeling for robust supply chain decisions.
ðŸ”¹ Adding Cost Optimization for Transportation & Inventory Balancing.
